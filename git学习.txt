/**
* “*”标识文件的后缀
*/


将git变为可管理的仓库 git init
git是分布式版本控制，所以添加用户名和邮箱作为一个标识 git config -global user.name/email "参数"
将文件提交到版本库
	git add "filename.*" //添加到暂存区
	git commmit -m "filename.*" //提交到仓库
	git status //查看文件是否被提交
	git diff filename.* //查看修改了什么
	git log //看看每次修改的日志
	git log --pretty=oneline //日志显示为缩略版
	git reset --hard HEAD^ //退回到上一版本
	git reset --hard HEAD^^ //退回到前二的版本
	git reset --hard HEAD~100 //退回到前100版本
	git reset --hard 版本号 //退回到一个特定的版本
	git reflog //查看版本号和上一个命令一块用效果比较好
	git checkout --file file //取消工作区的修改，命令需在commit前
	
ssh -keygen -t rsa -C "email" //生成本地ssh key
git远程库
	git remote add origin 远程git地址 //连接
	git push -u origin master //把本地库分支master内容推送到远程库（-u 命令在第一次关联本地库和远程库时使用）
	git clone //克隆远程库
git分支	
	git branch //查看分支
	git checkout 切换分支	
	git checkout -b //创建并切换分支
	git merge //合并到当前分支
	git branch -d //删除某分支
	git merge --no-ff -m "注释" 分支 //合并分支禁用fast forward（不保留分支信息）
	

首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。
	
	git stash //将当前分支的工作现场保留下来
	git stash list //查看工作现场
	git stash apply //恢复内容但是你需要git stash drop删除stash
	git stash pop //恢复的同时把stash内容也删除

多人协作

	查看远程库的信息 git remote
	查看远程库的详细信息 git remote -v


	推送分支 git push origin master //master为本地的分支名
	

	他人克隆项目后 git checkout -b dev origin/dev //dev为分支名，做完开发后 git push origin dev 推送到远程库
	git pull抓取最新的提交
	git branch --set-upstream dev origin/dev //指定本地dev分支与远程origin/dev分支的连接
常用的git命令

			
